app.version=0.0.1
mp.openapi.extensions.smallrye.info.title=Order management microservice API
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Just an example of event-driven Order management service
mp.openapi.extensions.smallrye.info.termsOfService=Your terms here...
mp.openapi.extensions.smallrye.info.contact.name=IBM Automation - EDA team
mp.openapi.extensions.smallrye.info.contact.url=http://https://ibm-cloud-architecture.github.io/refarch-eda/
mp.openapi.extensions.smallrye.info.license.name=Apache 2.0
mp.openapi.extensions.smallrye.info.license.url=https://www.apache.org/licenses/LICENSE-2.0.html

quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
%dev.quarkus.log.category."ibm.eda".level=DEBUG
quarkus.swagger-ui.always-include=true
quarkus.http.cors=true
quarkus.http.port=8080
%dev.quarkus.http.port=8080

kafka.topic.name=orders
%dev.kafka.bootstrap.servers=localhost:9092
%prod.kafka.sasl.mechanism=SSL
%prod.kafka.ssl.protocol=TLSv1.2
%prod.kafka.ssl.truststore.location=/deployments/certs/server/ca.p12
%prod.kafka.ssl.truststore.type=PKCS12
%prod.kafka.ssl.truststore.password=${KAFKA_CERT_PWD}
%prod.kafka.ssl.keystore.location=/deployments/certs/user/user.p12
%prod.kafka.ssl.keystore.password=${USER_CERT_PWD}
%prod.kafka.ssl.keystore.type=PKCS12

mp.messaging.outgoing.orders.connector=smallrye-kafka
mp.messaging.outgoing.orders.topic=orders
mp.messaging.outgoing.orders.acks=-1
mp.messaging.outgoing.orders.enable.idempotence=true
mp.messaging.outgoing.orders.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.orders.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.orders.max-in.flight.requests.per.connection=1
mp.messaging.outgoing.orders.delivery.time.out=60000
mp.messaging.outgoing.orders.client.id=OrderManager

mp.messaging.incoming.reefers.connector=smallrye-kafka
mp.messaging.incoming.reefers.topic=reefers
mp.messaging.incoming.reefers.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.reefers.value.deserializer=ibm.eda.kc.orderms.infra.events.reefer.ReeferEventDeserializer
mp.messaging.incoming.reefers.auto.offset.reset=earliest
mp.messaging.incoming.reefers.group.id=OrderManager
mp.messaging.incoming.voyages.connector=smallrye-kafka
mp.messaging.incoming.voyages.topic=voyages
mp.messaging.incoming.voyages.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.voyages.value.deserializer=ibm.eda.kc.orderms.infra.events.voyage.VoyageEventDeserializer
mp.messaging.incoming.voyages.auto.offset.reset=earliest
mp.messaging.incoming.voyages.group.id=OrderManager

# By default, the syntax used for cron expressions is based on Quartz - http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html
reefer.cron.expr=*/30 * * * * ?
voyage.cron.expr=*/30 * * * * ?